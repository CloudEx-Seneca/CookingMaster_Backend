// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.5

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userTokensFieldNames          = builder.RawFieldNames(&UserTokens{})
	userTokensRows                = strings.Join(userTokensFieldNames, ",")
	userTokensRowsExpectAutoSet   = strings.Join(stringx.Remove(userTokensFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userTokensRowsWithPlaceHolder = strings.Join(stringx.Remove(userTokensFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserTokensIdPrefix         = "cache:userTokens:id:"
	cacheUserTokensUserIdTypePrefix = "cache:userTokens:userId:type:"
)

type (
	userTokensModel interface {
		Insert(ctx context.Context, data *UserTokens) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserTokens, error)
		FindOneByUserIdType(ctx context.Context, userId int64, tp int64) (*UserTokens, error)
		Update(ctx context.Context, data *UserTokens) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserTokensModel struct {
		sqlc.CachedConn
		table string
	}

	UserTokens struct {
		Id        int64     `db:"id"`      // token id
		UserId    int64     `db:"user_id"` // user id
		Token     string    `db:"token"`   // user token
		Type      int64     `db:"type"`    // 0:register, 1:reset, 2:refresh
		Status    int64     `db:"status"`  // 0:active, 1:used, 2:expired, 3:revoked
		Expire    time.Time `db:"expire"`  // token expire
		CreatedAt time.Time `db:"created_at"`  // Time created
		UpdatedAt time.Time `db:"updated_at"`  // Time of last token update
	}
)

func newUserTokensModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserTokensModel {
	return &defaultUserTokensModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_tokens`",
	}
}

func (m *defaultUserTokensModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userTokensIdKey := fmt.Sprintf("%s%v", cacheUserTokensIdPrefix, id)
	userTokensUserIdTypeKey := fmt.Sprintf("%s%v:%v", cacheUserTokensUserIdTypePrefix, data.UserId, data.Type)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userTokensIdKey, userTokensUserIdTypeKey)
	return err
}

func (m *defaultUserTokensModel) FindOne(ctx context.Context, id int64) (*UserTokens, error) {
	userTokensIdKey := fmt.Sprintf("%s%v", cacheUserTokensIdPrefix, id)
	var resp UserTokens
	err := m.QueryRowCtx(ctx, &resp, userTokensIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userTokensRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTokensModel) FindOneByUserIdType(ctx context.Context, userId int64, tp int64) (*UserTokens, error) {
	userTokensUserIdTypeKey := fmt.Sprintf("%s%v:%v", cacheUserTokensUserIdTypePrefix, userId, tp)
	var resp UserTokens
	err := m.QueryRowIndexCtx(ctx, &resp, userTokensUserIdTypeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `type` = ? limit 1", userTokensRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, tp); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTokensModel) Insert(ctx context.Context, data *UserTokens) (sql.Result, error) {
	userTokensIdKey := fmt.Sprintf("%s%v", cacheUserTokensIdPrefix, data.Id)
	userTokensUserIdTypeKey := fmt.Sprintf("%s%v:%v", cacheUserTokensUserIdTypePrefix, data.UserId, data.Type)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userTokensRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Token, data.Type, data.Status, data.Expire)
	}, userTokensIdKey, userTokensUserIdTypeKey)
	return ret, err
}

func (m *defaultUserTokensModel) Update(ctx context.Context, newData *UserTokens) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	userTokensIdKey := fmt.Sprintf("%s%v", cacheUserTokensIdPrefix, data.Id)
	userTokensUserIdTypeKey := fmt.Sprintf("%s%v:%v", cacheUserTokensUserIdTypePrefix, data.UserId, data.Type)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userTokensRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.Token, newData.Type, newData.Status, newData.Expire, newData.Id)
	}, userTokensIdKey, userTokensUserIdTypeKey)
	return err
}

func (m *defaultUserTokensModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserTokensIdPrefix, primary)
}

func (m *defaultUserTokensModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userTokensRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserTokensModel) tableName() string {
	return m.table
}
